#!/bin/bash
set -e

case $1 in
    remove)
        # Switch to the release directory as the /bin dir is likely missing now
        cd "{{ install_prefix }}"
        export ERL_CRASH_DUMP="/dev/null"

        PING=$(ERL_DIST_PORT={{ epmdport }} ./bin/{{ app }} ping || echo)
        if [ "$PING" == "pong" ]; then
            echo "Node running, performing runtime release removal"
            read NODE_NAME <<<$(./bin/{{ app }} rpc erlang node)
            read NODE_COOKIE <<<$(./bin/{{ app }} rpc erlang get_cookie)
            erl -env ERL_MAX_PORTS 1024 -setcookie $NODE_COOKIE -hidden -dist_listen false -erl_epmd_port {{ epmdport }} -start_epmd false -name ctl-$$@127.0.0.1 -noshell -noinput -eval "
            Target = list_to_atom(\"$NODE_NAME\"),
            ok = case rpc:call(Target, release_handler, set_removed, [\"{{ dep_version }}\"], 300000) of
                ok ->
                    ok;
                {no_such_release, _} ->
                    ok
            end,
            init:stop()."

        else
            echo "Node not running, rewriting RELEASES"

            erl -hidden -dist_listen false -start_epmd false -name ctl-$$@127.0.0.1 -noshell -noinput -eval '
            RelFile = "releases/RELEASES",
            DataFile = "releases/start_erl.data",
            LogFile = "log",
            {ok, [Releases]} = file:consult(RelFile),
            Filtered = lists:filter(fun({_,_,"{{ dep_version }}",_,_,_}) -> false; (_) -> true end, Releases),
            case length(Filtered) of
                0 ->
                    io:format("No releases left, removing RELEASES file~n"),
                    ok = file:delete(RelFile),
                    ok = file:delete(DataFile),
                    ok = file:delete(LogFile);
                _ -> 
                    ok = file:write_file(RelFile, io_lib:format("~p.\n\n",[Filtered]))
            end,
            init:stop().'
        fi
    ;;
esac

exit 0
